name: Nightly Equity Rebuild

on:
  schedule:
    - cron: '0 3 * * *' # 03:00 UTC nightly
  workflow_dispatch:

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
    steps:
      - id: check
        env:
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          CRON_EQUITY_REBUILD_URL: ${{ secrets.CRON_EQUITY_REBUILD_URL }}
          VERCEL_BYPASS_SECRET: ${{ secrets.VERCEL_BYPASS_SECRET }}
        run: |
          if [ -n "$CRON_SECRET" ] && [ -n "$CRON_EQUITY_REBUILD_URL" ] && [ -n "$VERCEL_BYPASS_SECRET" ]; then
            echo "ready=true" >> "$GITHUB_OUTPUT"
          else
            echo "ready=false" >> "$GITHUB_OUTPUT"
          fi

  trigger:
    needs: precheck
    if: ${{ needs.precheck.outputs.ready == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Call equity rebuild cron endpoint
        env:
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          CRON_EQUITY_REBUILD_URL: ${{ secrets.CRON_EQUITY_REBUILD_URL }}
          VERCEL_BYPASS_SECRET: ${{ secrets.VERCEL_BYPASS_SECRET }}
        run: |
          if [ -z "$CRON_EQUITY_REBUILD_URL" ]; then
            echo "CRON_EQUITY_REBUILD_URL secret not set" >&2
            exit 1
          fi
          attempt=1
          while [ $attempt -le 3 ]; do
            echo "Attempt $attempt calling $CRON_EQUITY_REBUILD_URL"
            status=$(curl -s -m 30 -o response.json -w "%{http_code}" -X POST "$CRON_EQUITY_REBUILD_URL" \
              -H "x-cron-secret: $CRON_SECRET" \
              -H "x-vercel-protection-bypass: $VERCEL_BYPASS_SECRET")
            echo "HTTP Status: $status"
            echo "Response body:" && cat response.json || true
            if [ "$status" -ge 200 ] && [ "$status" -lt 300 ]; then
              break
            fi
            attempt=$((attempt+1))
            sleep 3
          done
          if [ "$status" -lt 200 ] || [ "$status" -ge 300 ]; then
            echo "Cron call failed with status $status after $attempt attempts" >&2
            exit 1
          fi

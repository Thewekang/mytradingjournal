name: Test Secrets

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ '.github/workflows/test-secrets.yml' ]

jobs:
  test-github-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Test GitHub Repository Secrets
        env:
          CRON_SECRET: ${{ secrets.CRON_SECRET }}
          CRON_EQUITY_REBUILD_URL: ${{ secrets.CRON_EQUITY_REBUILD_URL }}
          VERCEL_BYPASS_SECRET: ${{ secrets.VERCEL_BYPASS_SECRET }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          echo "Testing secret availability..."
          
          # Test CRON secrets
          if [ -n "$CRON_SECRET" ]; then
            echo "✅ CRON_SECRET is available (length: ${#CRON_SECRET})"
          else
            echo "❌ CRON_SECRET is missing"
          fi
          
          if [ -n "$CRON_EQUITY_REBUILD_URL" ]; then
            echo "✅ CRON_EQUITY_REBUILD_URL is available"
            echo "   URL starts with: $(echo "$CRON_EQUITY_REBUILD_URL" | cut -c1-20)..."
          else
            echo "❌ CRON_EQUITY_REBUILD_URL is missing"
          fi
          
          if [ -n "$VERCEL_BYPASS_SECRET" ]; then
            echo "✅ VERCEL_BYPASS_SECRET is available (length: ${#VERCEL_BYPASS_SECRET})"
          else
            echo "❌ VERCEL_BYPASS_SECRET is missing"
          fi
          
          # Test Vercel secrets
          if [ -n "$VERCEL_TOKEN" ]; then
            echo "✅ VERCEL_TOKEN is available (length: ${#VERCEL_TOKEN})"
          else
            echo "❌ VERCEL_TOKEN is missing"
          fi
          
          if [ -n "$VERCEL_ORG_ID" ]; then
            echo "✅ VERCEL_ORG_ID is available: $VERCEL_ORG_ID"
          else
            echo "❌ VERCEL_ORG_ID is missing"
          fi
          
          if [ -n "$VERCEL_PROJECT_ID" ]; then
            echo "✅ VERCEL_PROJECT_ID is available: $VERCEL_PROJECT_ID"
          else
            echo "❌ VERCEL_PROJECT_ID is missing"
          fi

  test-vercel-connection:
    runs-on: ubuntu-latest
    needs: test-github-secrets
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Test Vercel CLI Authentication
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          # Install Vercel CLI
          npm install -g vercel@latest
          
          # Test Vercel authentication
          echo "Testing Vercel CLI authentication..."
          if vercel whoami --token="$VERCEL_TOKEN"; then
            echo "✅ Vercel authentication successful"
          else
            echo "❌ Vercel authentication failed"
            exit 1
          fi
          
          # Test project access
          echo "Testing project access..."
          if vercel ls --token="$VERCEL_TOKEN" | grep -q "$VERCEL_PROJECT_ID" || true; then
            echo "✅ Project access verified"
          else
            echo "⚠️  Project may not be visible or accessible"
          fi

  test-cron-endpoint:
    runs-on: ubuntu-latest
    needs: test-github-secrets
    if: ${{ needs.test-github-secrets.result == 'success' }}
    steps:
      - name: Test Cron Endpoint Accessibility
        env:
          CRON_EQUITY_REBUILD_URL: ${{ secrets.CRON_EQUITY_REBUILD_URL }}
          VERCEL_BYPASS_SECRET: ${{ secrets.VERCEL_BYPASS_SECRET }}
        run: |
          echo "Testing cron endpoint accessibility..."
          
          # Test if the endpoint is reachable (without authentication)
          if curl -s -m 10 -o /dev/null -w "%{http_code}" "$CRON_EQUITY_REBUILD_URL" | grep -E "^[0-9]{3}$"; then
            status=$(curl -s -m 10 -o /dev/null -w "%{http_code}" "$CRON_EQUITY_REBUILD_URL")
            echo "✅ Endpoint is reachable (HTTP $status)"
            
            if [ "$status" = "401" ] || [ "$status" = "403" ]; then
              echo "   This is expected - endpoint requires authentication"
            fi
          else
            echo "❌ Endpoint is not reachable"
          fi
